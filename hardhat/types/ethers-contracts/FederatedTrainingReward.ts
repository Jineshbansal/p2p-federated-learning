/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  

  export interface FederatedTrainingRewardInterface extends Interface {
    getFunction(nameOrSignature: "cancelTask" | "createTask" | "hasSubmitted" | "pendingWithdrawals" | "setPendingWithdrawal" | "submitWeights" | "taskCount" | "tasks" | "withdrawPending"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "TaskCreated" | "WeightsSubmitted" | "Withdrawn"): EventFragment;

    encodeFunctionData(functionFragment: 'cancelTask', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'createTask', values: [string, string, BigNumberish]): string;
encodeFunctionData(functionFragment: 'hasSubmitted', values: [BigNumberish, AddressLike]): string;
encodeFunctionData(functionFragment: 'pendingWithdrawals', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'setPendingWithdrawal', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'submitWeights', values: [BigNumberish, string]): string;
encodeFunctionData(functionFragment: 'taskCount', values?: undefined): string;
encodeFunctionData(functionFragment: 'tasks', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'withdrawPending', values?: undefined): string;

    decodeFunctionResult(functionFragment: 'cancelTask', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'createTask', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'hasSubmitted', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'pendingWithdrawals', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setPendingWithdrawal', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'submitWeights', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'taskCount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'tasks', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'withdrawPending', data: BytesLike): Result;
  }

  
    export namespace TaskCreatedEvent {
      export type InputTuple = [taskId: BigNumberish, depositor: AddressLike, modelHash: string, datasetHash: string, numChunks: BigNumberish, totalReward: BigNumberish];
      export type OutputTuple = [taskId: bigint, depositor: string, modelHash: string, datasetHash: string, numChunks: bigint, totalReward: bigint];
      export interface OutputObject {taskId: bigint, depositor: string, modelHash: string, datasetHash: string, numChunks: bigint, totalReward: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace WeightsSubmittedEvent {
      export type InputTuple = [taskId: BigNumberish, trainer: AddressLike, weightsHash: string, rewardAmount: BigNumberish, remainingChunks: BigNumberish];
      export type OutputTuple = [taskId: bigint, trainer: string, weightsHash: string, rewardAmount: bigint, remainingChunks: bigint];
      export interface OutputObject {taskId: bigint, trainer: string, weightsHash: string, rewardAmount: bigint, remainingChunks: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace WithdrawnEvent {
      export type InputTuple = [who: AddressLike, amount: BigNumberish];
      export type OutputTuple = [who: string, amount: bigint];
      export interface OutputObject {who: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface FederatedTrainingReward extends BaseContract {
    
    connect(runner?: ContractRunner | null): FederatedTrainingReward;
    waitForDeployment(): Promise<this>;

    interface: FederatedTrainingRewardInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    cancelTask: TypedContractMethod<
      [taskId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    createTask: TypedContractMethod<
      [modelHash: string, datasetHash: string, numChunks: BigNumberish, ],
      [bigint],
      'payable'
    >
    

    
    hasSubmitted: TypedContractMethod<
      [arg0: BigNumberish, arg1: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    pendingWithdrawals: TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    setPendingWithdrawal: TypedContractMethod<
      [_address: AddressLike, _amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    submitWeights: TypedContractMethod<
      [taskId: BigNumberish, weightsHash: string, ],
      [void],
      'nonpayable'
    >
    

    
    taskCount: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    tasks: TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, string, string, bigint, bigint, bigint, boolean] & {depositor: string, modelHash: string, datasetHash: string, numChunks: bigint, remainingChunks: bigint, perChunkReward: bigint, exists: boolean }],
      'view'
    >
    

    
    withdrawPending: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'cancelTask'): TypedContractMethod<
      [taskId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'createTask'): TypedContractMethod<
      [modelHash: string, datasetHash: string, numChunks: BigNumberish, ],
      [bigint],
      'payable'
    >;
getFunction(nameOrSignature: 'hasSubmitted'): TypedContractMethod<
      [arg0: BigNumberish, arg1: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'pendingWithdrawals'): TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'setPendingWithdrawal'): TypedContractMethod<
      [_address: AddressLike, _amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'submitWeights'): TypedContractMethod<
      [taskId: BigNumberish, weightsHash: string, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'taskCount'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'tasks'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, string, string, bigint, bigint, bigint, boolean] & {depositor: string, modelHash: string, datasetHash: string, numChunks: bigint, remainingChunks: bigint, perChunkReward: bigint, exists: boolean }],
      'view'
    >;
getFunction(nameOrSignature: 'withdrawPending'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'TaskCreated'): TypedContractEvent<TaskCreatedEvent.InputTuple, TaskCreatedEvent.OutputTuple, TaskCreatedEvent.OutputObject>;
getEvent(key: 'WeightsSubmitted'): TypedContractEvent<WeightsSubmittedEvent.InputTuple, WeightsSubmittedEvent.OutputTuple, WeightsSubmittedEvent.OutputObject>;
getEvent(key: 'Withdrawn'): TypedContractEvent<WithdrawnEvent.InputTuple, WithdrawnEvent.OutputTuple, WithdrawnEvent.OutputObject>;

    filters: {
      
      'TaskCreated(uint256,address,string,string,uint256,uint256)': TypedContractEvent<TaskCreatedEvent.InputTuple, TaskCreatedEvent.OutputTuple, TaskCreatedEvent.OutputObject>;
      TaskCreated: TypedContractEvent<TaskCreatedEvent.InputTuple, TaskCreatedEvent.OutputTuple, TaskCreatedEvent.OutputObject>;
    

      'WeightsSubmitted(uint256,address,string,uint256,uint256)': TypedContractEvent<WeightsSubmittedEvent.InputTuple, WeightsSubmittedEvent.OutputTuple, WeightsSubmittedEvent.OutputObject>;
      WeightsSubmitted: TypedContractEvent<WeightsSubmittedEvent.InputTuple, WeightsSubmittedEvent.OutputTuple, WeightsSubmittedEvent.OutputObject>;
    

      'Withdrawn(address,uint256)': TypedContractEvent<WithdrawnEvent.InputTuple, WithdrawnEvent.OutputTuple, WithdrawnEvent.OutputObject>;
      Withdrawn: TypedContractEvent<WithdrawnEvent.InputTuple, WithdrawnEvent.OutputTuple, WithdrawnEvent.OutputObject>;
    
    };
  }